#!/usr/bin/env bash


tasklist=tasklist
pager=/usr/bin/less
editor=/usr/bin/nano

# format for tasklist
# tag : due-date : text : entry date

# todo -a
function append_entry {
    tag=
    duedate=
    text=
    echo "Tag: "
    read tag
    echo "Date task is due.
          yyyy-mm-dd: "
    read duedate
    echo "Message: "
    read text
    echo "$tag : $duedate : $text : Entered on $(date +%Y-%m-%d)" >> "$tasklist"
exit 0
}
# Thoughts:  Possible to use free-form due date, add field for date of entry, calculate due date
# from words like tomorrow, next week, Tuesday, etc.?

# todo -r <tag>
function recall_tags {
    IFS=":"
    while read line
    do
        if  [[ "${line:0:1}" = "$tag" ]]     ##### This works - $tag is defined in the loop for command options 
        then
            echo "$line"
        fi      
    done < "tasklist"
exit 0
}

# todo -d
function recall_due {
	duedate=
	echo "Show tasks due on: "
	read duedate
    IFS=":"
    while read line
    do
        if  [[ "${line:4:10}" = "$duedate" ]]
        then
            echo "$line"
        fi      
done < "tasklist"
exit 0
}	

# todo -k
function recall_keyword {
	key=
	echo "Search for keyword: "
	read key
	while read line
	do
	    grep "$key"
	done < "tasklist"
exit 0
}

function recall_alpha_date {
   grep "\: $word \:" tasklist 
exit 0
}

function show_help {
	echo "$help_text" #| "$pager"
    exit 0
}

help_text="
   Usage: $0  <option>
   
   valid options: 
       -a                     add entry to task list
       -d                     recall entries by date
       -e                     edit the task list 
       -h, --help, -?,        show this help message
       -k                     recall entries by keyword
       -l                     list all entries
       -r <tag>               recall entries by tag
       -w <word>              recall entries with word date, like \"none\" or \"tomorrow\" 
       "

#clear; date
echo 

if [[ -z "$*" ]]
then
    show_help
fi

if [[ "$1" = "-r" ]]  && [[ -z "$2" ]]
then
    echo "
    Missing argument.
    Usage: $0 -r <tag>
    "
    exit 1
fi
        
while [[ $1 == -* ]]; do
    case "$1" in
      -a) append_entry ;;
      -d) recall_due ;;
      -w) word="$2" ; recall_alpha_date ;;
      -k) recall_keyword ;;
      -r) tag=$2 ; recall_tags   ;;
      -l) "$pager" "$tasklist" ; exit 0 ;;
      -e) "$editor" "$tasklist" ; exit 0 ;;
      -h|--help|-\?) show_help; exit 0;;
      -*) echo "
    invalid option: $1
    "
    show_help
                1>&2; exit 1;;
    esac
done
