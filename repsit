#!/usr/bin/env bash
# refracta extra package selection and installation tool version 0.1
# Copyright 2011 fsmithred@gmail.com
# License: GPL-3  This is free software with no warranties, express 
# or implied. Use at your own risk. 
#
# SYNOPSIS:
# Check that user is root. Ask to run update, ask to run full-upgrade.
# The make_selections function presents the user with a menu of choices
# for single packages and package lists that can be installed. The user 
# can get more information about a package or list by choosing it from
# the menu. 
# The ask_install function gives the user the option to add the packages
# to the installation list, return to the menu without adding those
# packages, or exiting the script.
# The install_selections function will install all packages in the 
# install_list array.

#### NOTE: This is a test version. The update and upgrade are real, but 
#### package installation is simulated. Edit line 72 to change that.

# define some package lists.
# single packages can be added to the menu without being defined here.
dvd_set=(libdvdcss2 libdvdnav4 libdvdread4)
file_share=(samba smbfs smbclient)
graphics=(gimp blender inkscape)


# Check that user is root.
[[ $(id -u) -eq 0 ]] || { printf "\t You need to be root!\n" ; exit 1 ; }

# Ask to run update.
while true; do
    printf "  The package list needs to be updated before installing
  anything. If it's been awhile since you've done that, you should
  answer \"y\" to do it now. After the list is updated, aptitude will
  show you what packages are scheduled for security updates. This will
  be a simulated run, so answering yes or no will just return you to
  this script. 
    
  Update package list? "
    read ans
    case $ans in
      [Yy]*) aptitude update
             aptitude -s full-upgrade
             read -p "  Press the ENTER key when you're ready to proceed."
             sleep 1
             break ;;
      [Nn]*) break ;;
    esac
done

# Ask to run upgrade.
while true; do
    printf "\n  If any packages were listed for installation in the last
  step, you should upgrade them now by answering \"yes\".
    
  Install security updates? "
    read ans
    case $ans in
      [Yy]*) aptitude full-upgrade ; break ;;
      [Nn]*) break ;;
    esac
done

# Set an informative prompt for the menu.
PS3="Enter a choice or just hit ENTER to see the list."

# Don't quote the array here, or aptitude will puke.
install_selections () {
	echo "---"
	aptitude -s install ${install_list[@]}
	exit 0
}


# Answer "y" will add selections from menu to the install list, and
# then return to the menu. Answer "n" will just return to the menu.
# "e" will exit the script.
# Note:
# echo the array instead of printf, unless someone else can figure out
# how to get printf to echo the entire list, instead of just the first
# choice.
ask_install () {
	while true; do
		printf "\n\t Add these packages to the install list?\n
         y)   add packages and return to selection menu
         n)   don't add anything, but return to the selection menu
         e)   exit this utility
     "
	    read ans
	    case $ans in
	      [Yy]*)  install_list=( "${install_list[@]}" "${selection[@]}" )
	              printf "\t The following packages are marked for installation.\n"
                  echo "${install_list[@]}"
                  printf "\n"
	              break ;;
	      [Nn]*)  break ;;
	      [Ee]*)  exit 0 ;;
	    esac
	done
}


# To add more packages or package lists here, do two things:
# 1. add the package name or list name to the Options line.
# 2. add an elif block for the package or list.
# Note the different syntax on the export line for single packages
# vs. package lists.
make_selections () {
	printf "
  Select package groups by the number to get more information about them.
  You will be asked if you want to add them to the installation list or not.
  When you're ready to install the packages, select \"done\".
  If you want to exit this script without installing anything, select
  \"exit\".\n\n"
	
Options="dvd_set file_share graphics mousepad roxterm done exit"
select opt in $Options; do
    if [[ "$opt" = "dvd_set" ]]; then
        selection="${dvd_set[@]}"
        printf "\n\t This set contains packages necessary 
         for watching DVD movies.
         Packages: ${selection[@]}\n"
        ask_install
    elif [[ "$opt" = "file_share" ]]; then
        selection="${file_share[@]}"
        printf "\n\t This set contains packages for sharing files
         with computers running MS Windows.
         Packages: ${selection[@]}\n"
        ask_install
    elif [[ "$opt" = "graphics" ]]; then
        selection="${graphics[@]}"
        printf "\n\t This set contains packages for creating and
         editing images and movies.
         Packages: ${selection[@]}\n"
        ask_install
    elif [[ "$opt" = "mousepad" ]]; then
        selection=(mousepad)
        printf "\n\t Mousepad is a simple Xfce oriented text editor.
         Packages: ${selection[@]}\n"
        ask_install
    elif [[ "$opt" = "roxterm" ]]; then
        selection=(roxterm)
        printf "\n\t roxterm is a multi-tabbed GTK/VTE terminal emulator.
         Packages: ${selection[@]}\n"
        ask_install
    elif [[ "$opt" = "done" ]]; then
        install_selections
    elif [[ "$opt" = "exit" ]]; then
        printf "\t Exiting... \n"
        exit 0
    fi
done
}

return_to_menu () {
	make_selections
}


return_to_menu
